****생성자****
1. 생성자는 함수다. (특수함수)
2. 리턴이 없고 void도 없음
3. 함수이름은 클래스이름과 동일
4. 기본 생성자(디폴트 생성자) 존재.
5. 생성자를 사용하는 이유?
   --> 필드변수에 값을 대입하기 위해서

public class Pizza{
    String name;
    public Pizza(){
            this.name = "Hello";
    }
}

Pizza p = new Pizza();
1.Pizza클래스를 외부에서 호출하려면 강제로 생성자를 사용해야 함.
2. 강제? --> 필드변수 값을 대입 해줌. (목적) . 사용빈도수 낮음
3. get, set 함수 만들어서 대입

1.생성자도 함수라 위에 코드가 가능
2. name은 전역변수여서 생성자에서도 사용 가능

****필드변수는****
클래스 안에 있는 모든 메소드에서 사용 가능하다.
※ 변수옆에 this가 붙어있으면 무조건 전역변수

######################################################
package ex;

public class 파라미터클래스 {

	public static Pizza getPizza(Pizza p) {
		p.피자조각 = 8;
		p.피자종류 = "콤비네이션피자";
		return p;
	}

	public static void main(String[] args) {
	>>>	Pizza p = new Pizza();
		//첫번째 방법
		getPizza(p); //인자값없어서 -
		
		p = getPizza(p);
		System.out.println("피자조각 : "+p.피자조각);
		System.out.println("피자종류 : "+p.피자종류);
		//두번째 방법
	>>>	Pizza p2 = getPizza(p);
		p2.피자조각 = 1;
		p2.피자종류 = "치즈피자";
		System.out.println("피자조각 : "+p2.피자조각);
		System.out.println("피자종류 : "+p2.피자종류);


#>>> Line.48
파라미터에 new 로 불러온 클래스를 넣었기 때문에
클래스 리턴이 가능했던 것.
***메소드로 클래스 리턴이 가능하다.***
***메소드 파라미터에 클래스 타입이 있다면
   new를 이용해서 클래스를 불러온 후 파라미터에 넣어야 함***
